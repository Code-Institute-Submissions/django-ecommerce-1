from django.db import models
from django.contrib.auth import get_user_model

from products.models import Product


class Order(models.Model):
    """This stores point-in-time information relating to a customer order.
    E.g. billing and shipping information, item cost at the time the order
    was placed. Etc."""
    NEW = 1
    PAID = 2
    IN_PROGRESS = 3
    COMPLETE = 4
    STATUS_CHOICES = (
        (NEW, 'New'),
        (PAID, 'Payment received'),
        (IN_PROGRESS, 'Order being picked'),
        (COMPLETE, 'Complete'),
    )

    user = models.ForeignKey(get_user_model(), on_delete=models.CASCADE)
    status = models.IntegerField(choices=STATUS_CHOICES, default=NEW)

    # billing address - autopopulate from user model
    billing_name = models.CharField(
        max_length=100, null=True, verbose_name='Name')
    billing_address = models.CharField(
        max_length=255, null=True, verbose_name='Address')
    billing_city = models.CharField(
        max_length=50, null=True, verbose_name='City')
    billing_country = models.CharField(
        max_length=100, null=True, verbose_name='Country')
    billing_post_code = models.CharField(
        max_length=30, null=True, verbose_name='Post Code')
    # shipping address
    shipping_name = models.CharField(
        max_length=100, null=True, verbose_name='Name')
    shipping_address = models.CharField(
        max_length=255, null=True, verbose_name='Address')
    shipping_city = models.CharField(
        max_length=50, null=True, verbose_name='City')
    shipping_country = models.CharField(
        max_length=100, null=True, verbose_name='Country')
    shipping_post_code = models.CharField(
        max_length=30, null=True, verbose_name='Post Code')

    # used to store payment id generated by stripe
    stripe_id = models.CharField(max_length=50, null=True)

    last_updated = models.DateField(auto_now=True)
    order_date = models.DateField(auto_now_add=True)

    def __str__(self):
        """display text"""
        return f'Date: {self.order_date} - User: {self.user.username} - ID: ' \
            f'{self.id} - Items: {self.item_count()}'

    def item_count(self):
        """output the number of items ordered"""
        count = self.orderitem_set.all().count()

        if count is None:
            count = 0

        return count

    def status_progress(self):
        """Return progress as a number out of 100 to render status bar"""
        # subtract 1 from status and total choices so that progress bar is
        # empty when status is 'New' (1-1=0) and full when 'Complete' (4-1=3)
        return int((self.status - 1) / (len(self.STATUS_CHOICES) - 1) * 100)

    def total(self):
        """sum the total cost of all items"""
        products = self.orderitem_set.all().values_list('product_id')

        total = 0

        if products:
            for product in products:
                product_id = product[0]
                price = Product.objects.get(id=product_id).price

                total += price

        return total


class OrderItem(models.Model):
    """Stores a new entry for every individual product within an order. This
    will translate one basketitem into multiple order items if quantity > 1.
    Each order item represents a quantity of 1."""

    NEW = 1
    IN_PROGRESS = 2
    PICKED = 3
    SHIPPED = 4
    CANCELLED = 5
    STATUS_CHOICES = (
        (NEW, 'New'),
        (IN_PROGRESS, 'In progress'),
        (PICKED, 'Item picked'),
        (SHIPPED, 'Shipped'),
        (CANCELLED, 'Cancelled'),
    )
    order = models.ForeignKey(Order, on_delete=models.CASCADE)
    status = models.IntegerField(choices=STATUS_CHOICES, default=NEW)
    product = models.ForeignKey(Product, on_delete=models.PROTECT)
    price = models.DecimalField(max_digits=6, decimal_places=2)
    last_updated = models.DateField(auto_now=True)
    dated_added = models.DateField(auto_now_add=True)
